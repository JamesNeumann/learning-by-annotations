"""Change user id to char

Revision ID: 7380dae01035
Revises: c35712b24b98
Create Date: 2023-04-30 07:42:05.565498

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import mysql

# revision identifiers, used by Alembic.
revision = "7380dae01035"
down_revision = "c35712b24b98"
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    # op.execute("ALTER TABLE `course` DROP FOREIGN KEY IF EXISTS `course_ibfk_1`")
    try:
        op.drop_constraint("course_ibfk_1", "course", type_="foreignkey")
    except Exception as e:
        print(e)
    op.alter_column(
        "course",
        "owner_id",
        existing_type=mysql.INTEGER(),
        type_=sa.CHAR(length=36),
        existing_nullable=True,
    )
    try:
        op.drop_constraint("coursemembers_ibfk_2", "coursemembers", type_="foreignkey")
    except Exception as e:
        print(e)
    op.alter_column(
        "coursemembers",
        "user_id",
        existing_type=mysql.INTEGER(),
        type_=sa.CHAR(length=36),
        existing_nullable=False,
    )
    try:
        op.drop_constraint("newtask_ibfk_2", "newtask", type_="foreignkey")
    except Exception as e:
        print(e)
    op.alter_column(
        "newtask",
        "user_id",
        existing_type=mysql.INTEGER(),
        type_=sa.CHAR(length=36),
        existing_nullable=False,
    )
    try:
        op.drop_constraint(
            "questionnaireanswer_ibfk_2", "questionnaireanswer", type_="foreignkey"
        )
    except Exception as e:
        print(e)
    op.alter_column(
        "questionnaireanswer",
        "user_id",
        existing_type=mysql.INTEGER(),
        type_=sa.CHAR(length=36),
        existing_nullable=True,
    )
    try:
        op.drop_constraint("taskstatistic_ibfk_3", "taskstatistic", type_="foreignkey")
    except Exception as e:
        print(e)
    op.alter_column(
        "taskstatistic",
        "user_id",
        existing_type=mysql.INTEGER(),
        type_=sa.CHAR(length=36),
        existing_nullable=False,
    )

    try:
        op.drop_constraint("usersolution_ibfk_5", "usersolution", type_="foreignkey")
    except Exception as e:
        print(e)
    op.alter_column(
        "usersolution",
        "user_id",
        existing_type=mysql.INTEGER(),
        type_=sa.CHAR(length=36),
        existing_nullable=False,
    )
    op.alter_column(
        "user",
        "id",
        existing_type=mysql.INTEGER(),
        type_=sa.CHAR(length=36),
        existing_nullable=False,
    )

    op.create_foreign_key(
        "course_ibfk_1", "course", "user", ["owner_id"], ["id"], ondelete="CASCADE"
    )
    op.create_foreign_key(
        "newtask_ibfk_2", "newtask", "user", ["user_id"], ["id"], ondelete="CASCADE"
    )
    op.create_foreign_key(
        "usersolution_ibfk_5",
        "usersolution",
        "user",
        ["user_id"],
        ["id"],
        ondelete="CASCADE",
    )
    op.create_foreign_key(
        "taskstatistic_ibfk_3",
        "taskstatistic",
        "user",
        ["user_id"],
        ["id"],
        ondelete="CASCADE",
    )
    op.create_foreign_key(
        "questionnaireanswer_ibfk_2",
        "questionnaireanswer",
        "user",
        ["user_id"],
        ["id"],
        ondelete="CASCADE",
    )
    op.create_foreign_key(
        "coursemembers_ibfk_2",
        "coursemembers",
        "user",
        ["user_id"],
        ["id"],
        ondelete="CASCADE",
    )
    op.create_foreign_key(
        None,
        "taskquestionnaires",
        "questionnaire",
        ["questionnaire_id"],
        ["id"],
        ondelete="CASCADE",
    )

    op.create_foreign_key(
        None, "taskquestionnaires", "task", ["task_id"], ["id"], ondelete="CASCADE"
    )

    # ### end Alembic commands ###


def downgrade():
    try:
        op.drop_constraint("course_ibfk_1", "course", type_="foreignkey")
    except Exception as e:
        print(e)
    op.alter_column(
        "course",
        "owner_id",
        existing_type=sa.CHAR(length=36),
        type_=mysql.INTEGER(),
        existing_nullable=True,
    )
    try:
        op.drop_constraint("coursemembers_ibfk_2", "coursemembers", type_="foreignkey")
    except Exception as e:
        print(e)
    op.alter_column(
        "coursemembers",
        "user_id",
        existing_type=sa.CHAR(length=36),
        type_=mysql.INTEGER(),
        existing_nullable=False,
    )
    try:
        op.drop_constraint("newtask_ibfk_2", "newtask", type_="foreignkey")
    except Exception as e:
        print(e)
    op.alter_column(
        "newtask",
        "user_id",
        existing_type=sa.CHAR(length=36),
        type_=mysql.INTEGER(),
        existing_nullable=False,
    )
    try:
        op.drop_constraint(
            "questionnaireanswer_ibfk_2", "questionnaireanswer", type_="foreignkey"
        )
    except Exception as e:
        print(e)
    op.alter_column(
        "questionnaireanswer",
        "user_id",
        existing_type=sa.CHAR(length=36),
        type_=mysql.INTEGER(),
        existing_nullable=True,
    )
    try:
        op.drop_constraint("taskstatistic_ibfk_3", "taskstatistic", type_="foreignkey")
    except Exception as e:
        print(e)
    op.alter_column(
        "taskstatistic",
        "user_id",
        existing_type=sa.CHAR(length=36),
        type_=mysql.INTEGER(),
        existing_nullable=False,
    )

    try:
        op.drop_constraint("usersolution_ibfk_5", "usersolution", type_="foreignkey")
    except Exception as e:
        print(e)
    op.alter_column(
        "usersolution",
        "user_id",
        existing_type=sa.CHAR(length=36),
        type_=mysql.INTEGER(),
        existing_nullable=False,
    )
    op.alter_column(
        "user",
        "id",
        existing_type=sa.CHAR(length=36),
        type_=mysql.INTEGER(),
        existing_nullable=False,
    )

    op.create_foreign_key(
        "course_ibfk_1", "course", "user", ["owner_id"], ["id"], ondelete="CASCADE"
    )
    op.create_foreign_key(
        "newtask_ibfk_2", "newtask", "user", ["user_id"], ["id"], ondelete="CASCADE"
    )
    op.create_foreign_key(
        "usersolution_ibfk_5",
        "usersolution",
        "user",
        ["user_id"],
        ["id"],
        ondelete="CASCADE",
    )
    op.create_foreign_key(
        "taskstatistic_ibfk_3",
        "taskstatistic",
        "user",
        ["user_id"],
        ["id"],
        ondelete="CASCADE",
    )
    op.create_foreign_key(
        "questionnaireanswer_ibfk_2",
        "questionnaireanswer",
        "user",
        ["user_id"],
        ["id"],
        ondelete="CASCADE",
    )
    op.create_foreign_key(
        "coursemembers_ibfk_2",
        "coursemembers",
        "user",
        ["user_id"],
        ["id"],
        ondelete="CASCADE",
    )
    op.create_foreign_key(
        None,
        "taskquestionnaires",
        "questionnaire",
        ["questionnaire_id"],
        ["id"],
        ondelete="CASCADE",
    )

    op.create_foreign_key(
        None, "taskquestionnaires", "task", ["task_id"], ["id"], ondelete="CASCADE"
    )
