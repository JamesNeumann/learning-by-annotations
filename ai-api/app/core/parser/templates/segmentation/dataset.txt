class MaskDataset(Dataset):
    def __init__(
        self,
        *,
        random_seed=1234,
    ):
        self.random_seed = random_seed
        self.x_paths = []
        self.y_paths = []

        self.init_dataset()

    def init_dataset(self):
        dataset = ClearMlDataset.get(
            dataset_id="${dataset_id}",
            alias="${dataset_id}",
        )

        dataset_path = dataset.get_local_copy()
        self.x_paths = np.array(glob.glob(f"{dataset_path}/images/*.[jp][pn]g"))
        self.y_paths = np.array(glob.glob(f"{dataset_path}/masks/*.png"))

        metadata = dataset.get_metadata()

        self.class_map = metadata["class_map"]
        self.classes = metadata["classes"]
        self.dimension = metadata["dimension"]
        self.is_grayscale = metadata["is_grayscale"]

        normalize = A.Normalize(mean=(0.485, 0.456, 0.406), std=(0.229, 0.224, 0.225))
        resize_dimension = self.dimension
        if resize_dimension["x"] > 256:
            resize_dimension["x"] = 256
        if resize_dimension["y"] > 256:
            resize_dimension["y"] = 256
        self.transform = A.Compose(
            [
                A.Resize(height=resize_dimension["y"], width=resize_dimension["x"]),
                normalize,
                ToTensorV2(),
            ]
        )

        self.rgb_to_int_map = {}
        for name in self.class_map.keys():
            color = self.class_map[name]["color"]
            self.rgb_to_int_map[(color[0], color[1], color[2])] = self.class_map[name][
                "index"
            ]

    def mask_to_onehot(self, mask):
        """Convert an RGB mask to a one-hot encoded mask."""
        onehot_mask = np.zeros(
            (*mask.shape[:2], len(self.rgb_to_int_map)), dtype=np.uint8
        )

        for i, (rgb, int_val) in enumerate(self.rgb_to_int_map.items()):
            onehot_mask[(mask == rgb).all(axis=2), i] = 1

        return onehot_mask

    def __len__(self):
        return len(self.x_paths)

    def __getitem__(self, idx):
        img_path = self.x_paths[idx]
        mask_path = self.y_paths[idx]
        img = Image.open(img_path).convert("RGB")
        mask = Image.open(mask_path)

        mask = np.array(mask)
        onehot_mask = self.mask_to_onehot(mask)

        # Apply transformations using Albumentations
        if self.transform:
            transformed = self.transform(image=np.array(img), mask=onehot_mask)
            img = transformed["image"].float()
            mask_single_channel = transformed["mask"].float()

        return img, mask_single_channel
