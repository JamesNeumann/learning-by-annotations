# Classification dataset
class CustomDataset(Dataset):
    def __init__(self):
        dataset = ClearmlDataset.get(dataset_id="${dataset_id}")
        dataset_path = dataset.get_local_copy()
        class_folder_list = glob.glob(f"{dataset_path}/*")

        metadata = dataset.get_metadata()

        self.class_map = metadata['class_map']
        self.classes = metadata['classes']
        self.dimension = metadata['dimension']
        self.is_grayscale = metadata['is_grayscale']

        self.y = []
        self.x = []

        for class_path in class_folder_list:
            class_name = class_path.split("/")[-1]

            for img_path in glob.glob(f"{class_path}/*.png"):
                self.y.append(self.class_map[class_name])
                self.x.append(img_path)

        if self.is_grayscale:
            normalize = A.Normalize((0.1307,), (0.3081,))
        else:
            normalize = A.Normalize(mean=(0.485, 0.456, 0.406), std=(0.229, 0.224, 0.225))
        self.transform = A.Compose(
            [
                A.Resize(height=self.dimension["y"], width=self.dimension["x"]),
                normalize,
                ToTensorV2(),
            ]
        )

    def __len__(self):
        return len(self.x)

    def __getitem__(self, idx):
        img_path = self.x[idx]
        target = self.y[idx]
        image = Image.open(img_path)
        if self.is_grayscale:
            image = image.convert("L")
        else:
            image = image.convert("RGB")
        image = np.array(image)
        if self.transform:
            image = self.transform(image=image)['image']
        return image, torch.tensor(target)